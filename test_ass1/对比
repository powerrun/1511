            if (command == 'w') {
                if (player_row - 1 >= 0 && 
                    (map[player_row - 1][player_col].type == BUSH || 
                    map[player_row - 1][player_col].type == FLOWER)) {
                    map[player_row - 1][player_col].type = EMPTY;
                }
            }
            else if (command == 'a') {
                if (player_col - 1 >= 0 && 
                    (map[player_row][player_col - 1].type == BUSH || 
                    map[player_row][player_col - 1].type == FLOWER)) {
                    map[player_row][player_col - 1].type = EMPTY;
                }
            }
            else if (command == 's') {
                if (player_row + 1 <= MAX_ROW - 1 && 
                    (map[player_row + 1][player_col].type == BUSH || 
                    map[player_row + 1][player_col].type == FLOWER)) {
                    map[player_row + 1][player_col].type = EMPTY;
                }
            }
            else if (command == 'd') {
                if (player_col + 1 <= MAX_COL - 1 && 
                    (map[player_row][player_col + 1].type == BUSH || 
                    map[player_row][player_col + 1].type == FLOWER)) {
                    map[player_row][player_col + 1].type = EMPTY;
                }
            }





// 2.4
唤醒
    for (int alert_row = player_row - 2; alert_row <= player_row + 2; alert_row++) {
        for (int alert_col = player_col - 2; alert_col <= player_col + 2; alert_col++) {
            if (alert_row >= 0 && alert_row < MAX_ROW && 
                alert_col >= 0 && alert_col < MAX_COL && 
                map[alert_row][alert_col].type == FLOWER) {
                if (map[alert_row][alert_col].flower.state == DORMANT) {
                    map[alert_row][alert_col].flower.state = DISTURBED;
                }
                else {
                    map[alert_row][alert_col].flower.state = AWAKENED;
                }
            }
        }
    }





// 2.2 重做吧

// stage 2.2 - 2.4

void player_action(struct tile map[MAX_ROW][MAX_COL], int player_row, int player_col) {
    char command, cut_direction;
    printf("Game Started!\nEnter command: ");
    int return_val = scanf(" %c", &command);
    // will exit when user press ctrl + d
    int alert = FALSE;

    while (return_val == 1) {
        if (command == 'w') {
            if (player_row - 1 >= 0 && 
                (map[player_row - 1][player_col].type == EMPTY)) {
                player_row -= 1;
            }
            else if (player_row - 1 >= 0 && 
                map[player_row - 1][player_col].type == BRANCH) {
                map[player_row - 1][player_col].type = EMPTY;
                player_row -= 1;
                alert = TRUE;
            }
        }
        else if (command == 'a') {
            if (player_col - 1 >= 0 && 
                (map[player_row][player_col - 1].type == EMPTY)) {
                player_col -= 1;
            }
            else if (player_col - 1 >= 0 && 
                map[player_row][player_col - 1].type == BRANCH) {
                map[player_row][player_col - 1].type = EMPTY;
                player_col -= 1;
                alert = TRUE;
            }
        }
        else if (command == 's') {
            if (player_row + 1 <= MAX_ROW - 1 && 
                (map[player_row + 1][player_col].type == EMPTY)) {
                player_row += 1;
            }
            else if (player_row + 1 <= MAX_ROW - 1 && 
                map[player_row + 1][player_col].type == BRANCH) {
                map[player_row + 1][player_col].type = EMPTY;
                player_row += 1;
                alert = TRUE;
            }
        }
        else if (command == 'd') {
            if (player_col + 1 <= MAX_COL - 1 && 
                (map[player_row][player_col + 1].type == EMPTY)) {
                player_col += 1;
            }
            else if (player_col + 1 <= MAX_COL - 1 && 
                map[player_row][player_col + 1].type == BRANCH) {
                map[player_row][player_col + 1].type = EMPTY;
                player_col += 1;
                alert = TRUE;
            }
        }

        // stage 2.3: Cutting Flowers
        else if (command == 'c') {
            scanf(" %c", &cut_direction);
            
            if (cut_direction == 'w') {
                if (player_row - 1 >= 0 && map[player_row - 1][player_col].type == BUSH) {
                    map[player_row - 1][player_col].type = EMPTY;
                }
                else if (player_row - 1 >= 0 && map[player_row - 1][player_col].type == FLOWER) {
                    map[player_row - 1][player_col].type = EMPTY;
                }
            }
            else if (cut_direction == 'a') {
                if (player_col - 1 >= 0 && map[player_row][player_col - 1].type == BUSH) {
                    map[player_row][player_col - 1].type = EMPTY;
                }
                else if (player_col - 1 >= 0 && map[player_row][player_col - 1].type == FLOWER) {
                    map[player_row][player_col - 1].type = EMPTY;
                }
            }
            else if (cut_direction == 's') {
                if (player_row + 1 <= MAX_ROW - 1 && map[player_row + 1][player_col].type == BUSH) {
                    map[player_row + 1][player_col].type = EMPTY;
                    alert = TRUE;
                }
                else if (player_row + 1 <= MAX_ROW - 1 && map[player_row + 1][player_col].type == FLOWER) {
                    map[player_row + 1][player_col].type = EMPTY;
                }
            }
            else if (cut_direction == 'd') {
                if (player_col + 1 <= MAX_COL - 1 && map[player_row][player_col + 1].type == BUSH) {
                    map[player_row][player_col + 1].type = EMPTY;
                    alert = TRUE;
                }
                else if (player_col + 1 <= MAX_COL - 1 && map[player_row][player_col + 1].type == FLOWER) {
                    map[player_row][player_col + 1].type = EMPTY;
                }
            }
            alert = TRUE;
        }
        else {
            // stay still
        }

        // call alerting_flowers
        if (alert == TRUE) {
            alerting_flowers(map, player_row, player_col);
            alert = FALSE;
        }

        print_map(map, player_row, player_col);

        printf("Enter command: ");
        return_val = scanf(" %c", &command);
    }
}

// stage 2.4: Alerting Flowers
void alerting_flowers(struct tile map[MAX_ROW][MAX_COL], int player_row, int player_col) {
    // Calculate alert boundaries
    int min_alert_row, max_alert_row, min_alert_col, max_alert_col;
    min_alert_row = player_row - 2;
    min_alert_col = player_col - 2;
    max_alert_row = player_row + 2;
    max_alert_col = player_col + 2;

    // Alerting flowers
    for (int alert_row = min_alert_row; alert_row <= max_alert_row; alert_row++) {
        for (int alert_col = min_alert_col; alert_col <= max_alert_col; alert_col++) {
            if (alert_row >= 0 && alert_row < MAX_ROW && alert_col >= 0 && alert_col < MAX_COL && 
                map[alert_row][alert_col].type == FLOWER) 
            {
                if (map[alert_row][alert_col].flower.state == DORMANT) {
                    map[alert_row][alert_col].flower.state = DISTURBED;
                }
                else {
                    map[alert_row][alert_col].flower.state = AWAKENED;
                }
            }
        }
    }
}



















// alert 统一一个函数

        for (result.alert_row = result.player_row - 2; result.alert_row <= result.player_row + 2; result.alert_row++) {
            for (result.alert_col = result.player_col - 2; result.alert_col <= result.player_row + 2; result.alert_col++) {
                if (result.alert_row >= 0 && result.alert_row < MAX_ROW && 
                    result.alert_col >= 0 && result.alert_col < MAX_COL && 
                    map[result.alert_row][result.alert_col].type == FLOWER) 
                {
                    if (map[result.alert_row][result.alert_col].flower.state == DORMANT) {
                        map[result.alert_row][result.alert_col].flower.state = DISTURBED;
                    }
                    else if (map[result.alert_row][result.alert_col].flower.state == DISTURBED) {
                        map[result.alert_row][result.alert_col].flower.state = AWAKENED;
                    }
                }
            }
        }


// 花，alert之前先计算alert中心
    char direction;
    scanf(" %c", &direction);
    if (direction == 'w') {
        result.alert_row = result.player_row - 1;
        result.alert_col = result.player_col;
    }
    else if (direction == 's') {
        result.alert_row = result.player_row + 1;
        result.alert_col = result.player_col;
    }
    else if (direction == 'a') {
        result.alert_row = result.player_row;
        result.alert_col = result.player_col - 1;
    }
    else if (direction == 'd') {
        result.alert_row = result.player_row;
        result.alert_col = result.player_col + 1;
    }




// Function to move the player on the game map based on the given command
struct result move_player(struct tile map[MAX_ROW][MAX_COL], struct result result, char command) {
    // Check the command provided by the player
    if (command == 'w') {
        // Move the player upwards ('w' key)
        if (result.player_row - 1 >= 0 && 
            map[result.player_row - 1][result.player_col].type == EMPTY) {
            // Check if the destination tile is empty
            // If yes, move the player to the empty tile
            result.player_row--;
        }
        else if (result.player_row - 1 >= 0 && map[result.player_row - 1][result.player_col].type == BRANCH) {
            // If the destination tile contains a branch
            // Move the player and remove the branch
            result.player_row--;
            map[result.player_row][result.player_col].type = EMPTY;
            // Alert nearby flowers about the player's action
            alert(map, result.player_row, result.player_col);
        }
    }
    else if (command == 's') {
        // Move the player downwards ('s' key)
        if (result.player_row + 1 < MAX_ROW && map[result.player_row + 1][result.player_col].type == EMPTY) {
            // Check if the destination tile is empty
            // If yes, move the player to the empty tile
            result.player_row++;
        }
        else if (result.player_row + 1 < MAX_ROW && map[result.player_row + 1][result.player_col].type == BRANCH) {
            // If the destination tile contains a branch
            // Move the player and remove the branch
            result.player_row++;
            map[result.player_row][result.player_col].type = EMPTY;
            // Alert nearby flowers about the player's action
            alert(map, result.player_row, result.player_col);
        }
    }
    else if (command == 'a') {
        // Move the player to the left ('a' key)
        if (result.player_col - 1 >= 0 && map[result.player_row][result.player_col - 1].type == EMPTY) {
            // Check if the destination tile is empty
            // If yes, move the player to the empty tile
            result.player_col--;
        }
        else if (result.player_col - 1 >= 0 && map[result.player_row][result.player_col - 1].type == BRANCH) {
            // If the destination tile contains a branch
            // Move the player and remove the branch
            result.player_col--;
            map[result.player_row][result.player_col].type = EMPTY;
            // Alert nearby flowers about the player's action
            alert(map, result.player_row, result.player_col);
        }
    }
    else if (command == 'd') {
        // Move the player to the right ('d' key)
        if (result.player_col + 1 < MAX_COL && map[result.player_row][result.player_col + 1].type == EMPTY) {
            // Check if the destination tile is empty
            // If yes, move the player to the empty tile
            result.player_col++;
        }
        else if (result.player_col + 1 < MAX_COL && map[result.player_row][result.player_col + 1].type == BRANCH) {
            // If the destination tile contains a branch
            // Move the player and remove the branch
            result.player_col++;
            map[result.player_row][result.player_col].type = EMPTY;
            // Alert nearby flowers about the player's action
            alert(map, result.player_row, result.player_col);
        }
    }

    // Return the updated result after the player's movement
    return result;
}




// Function to move the player on the game map based on the given command
struct result move_player(struct tile map[MAX_ROW][MAX_COL], struct result result, char command) {
    // Check the command provided by the player
    if (command == 'w') {
        // Move the player upwards ('w' key)
        if (result.player_row - 1 >= 0 && 
            map[result.player_row - 1][result.player_col].type == EMPTY) {
            // Check if the destination tile is empty
            // If yes, move the player to the empty tile
            result.player_row--;
        }
        else if (result.player_row - 1 >= 0 && map[result.player_row - 1][result.player_col].type == BRANCH) {
            // If the destination tile contains a branch
            // Move the player and remove the branch
            result.player_row--;
            map[result.player_row][result.player_col].type = EMPTY;
            // Alert nearby flowers about the player's action
            alert(map, result.player_row, result.player_col);
        }
    }
    else if (command == 's') {
        // Move the player downwards ('s' key)
        if (result.player_row + 1 < MAX_ROW && map[result.player_row + 1][result.player_col].type == EMPTY) {
            // Check if the destination tile is empty
            // If yes, move the player to the empty tile
            result.player_row++;
        }
        else if (result.player_row + 1 < MAX_ROW && map[result.player_row + 1][result.player_col].type == BRANCH) {
            // If the destination tile contains a branch
            // Move the player and remove the branch
            result.player_row++;
            map[result.player_row][result.player_col].type = EMPTY;
            // Alert nearby flowers about the player's action
            alert(map, result.player_row, result.player_col);
        }
    }
    else if (command == 'a') {
        // Move the player to the left ('a' key)
        if (result.player_col - 1 >= 0 && map[result.player_row][result.player_col - 1].type == EMPTY) {
            // Check if the destination tile is empty
            // If yes, move the player to the empty tile
            result.player_col--;
        }
        else if (result.player_col - 1 >= 0 && map[result.player_row][result.player_col - 1].type == BRANCH) {
            // If the destination tile contains a branch
            // Move the player and remove the branch
            result.player_col--;
            map[result.player_row][result.player_col].type = EMPTY;
            // Alert nearby flowers about the player's action
            alert(map, result.player_row, result.player_col);
        }
    }
    else if (command == 'd') {
        // Move the player to the right ('d' key)
        if (result.player_col + 1 < MAX_COL && map[result.player_row][result.player_col + 1].type == EMPTY) {
            // Check if the destination tile is empty
            // If yes, move the player to the empty tile
            result.player_col++;
        }
        else if (result.player_col + 1 < MAX_COL && map[result.player_row][result.player_col + 1].type == BRANCH) {
            // If the destination tile contains a branch
            // Move the player and remove the branch
            result.player_col++;
            map[result.player_row][result.player_col].type = EMPTY;
            // Alert nearby flowers about the player's action
            alert(map, result.player_row, result.player_col);
        }
    }

    // Return the updated result after the player's movement
    return result;
}











void function_defend_flower(struct tile map[MAX_ROW][MAX_COL]) {
    for (int row = 1; row < MAX_ROW - 1; row++) {
        for (int col = 1; col < MAX_COL - 1; col++) {
            if (map[row][col].type == FLOWER && map[row][col].flower.state != DORMANT) {
                if (map[row][col].flower.skip_next_defense) {
                    
                    map[row][col].flower.skip_next_defense = FALSE; 
                } 
                else {
                    
                    place_bush_around_flower(map, row, col);
                }
            }
        }
    }
}

void place_bush_around_flower(struct tile map[MAX_ROW][MAX_COL], int flower_row, int flower_col) {
    
    int weak_points_order[4][2] = { {flower_row + 1, flower_col}, {flower_row, flower_col + 1}, {flower_row - 1, flower_col}, {flower_row, flower_col - 1} };

    for (int i = 0; i < 4; i++) {
        int weak_row = weak_points_order[i][0];
        int weak_col = weak_points_order[i][1];
        if (weak_row >= 0 && weak_row < MAX_ROW &&
            weak_col >= 0 && weak_col < MAX_COL &&
            map[weak_row][weak_col].type == BRANCH) {

            
            map[weak_row][weak_col].type = BUSH;
            map[flower_row][flower_col].flower.skip_next_defense = TRUE;
            
        }
        
        if (weak_row >= 0 && weak_row < MAX_ROW &&
            weak_col >= 0 && weak_col < MAX_COL &&
            map[weak_row][weak_col].type == EMPTY) {

        
            map[weak_row][weak_col].type = BUSH;
            map[flower_row][flower_col].flower.skip_next_defense = TRUE;
            break; 
        }
    }
}



